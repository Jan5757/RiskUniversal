### Формат правила

Правило представлено в формате JSON и содержит несколько разделов:

1) **joins**. Список необходимых join-ов. Поддерживаются следующие виды JOIN: inner, left, right.

В случае, если объединение делается по нескольким полям, необходимо заполнить 
такой блок для каждого поля. В примере объединение производится по уникальному идентификатору объекта, году и кварталу.

```jsx
"joins":
[
  {
			"table_left": "tmp_tos.vsa_nd_nds_r1",
			"entity_left": "fid",
			"table_right": "tmp_tos.vsa_nd_nds_r2",
			"entity_right": "fid",
			"type": "inner"
	},
	{
			"table_left": "tmp_tos.vsa_nd_nds_r1",
			"entity_left": "year",
			"table_right": "tmp_tos.vsa_nd_nds_r2",
			"entity_right": "year",
			"type": "inner"
		},
		{
			"table_left": "tmp_tos.vsa_nd_nds_r1",
			"entity_left": "quarter",
			"table_right": "tmp_tos.vsa_nd_nds_r2",
			"entity_right": "quarter",
			"type": "inner"
		}
]
```

`table_left` - левая таблица для объединения

`entity_left` - поле из левой таблицы

`table_right` - правая таблица для объединения

`entity_right` - поле из правой таблицы

`type` - тип объединения (доступны inner, left, right).

2) **variables** – список переменных, используемых в данном правиле. Поля извлекаются из заранее подготовленного view (то есть после join). Пример описания блока и переменной:

```jsx
"variables": [
		{
			"name": "fid",
			"table": "tmp_tos.vsa_nd_nds_r1",
			"field": "fid",
			"type": "BigDecimal"
		}
]
```

`name` - уникальное в пределах дерева строковое имя поля, не может начинаться с цифр, содержит только цифры и латинские символы и символы _
`table` - название витрины и таблицы, в которой содержится поле
`field` - название колонки в таблице
`type` - ожидаемый тип поля (доступны BigDecimal, String, Date)

3) **parameters** - значения, которые вычисляются в процессе расчета правил, в том числе с использованием переменных из блока **variables**.

```jsx
"parameters": [
		{
			"name": "p1",
			"value": "s40-s120_3",
			"type": "BigDecimal"
		}
	]
```

- `name` – уникальное в пределах дерева строковое имя поля, не может начинаться с цифр, содержит только цифры и латинские символы и символы `_`.
- `value` – строка, содержащая правило расчета параметра с использованием других параметров, переменных и допустимых операторов (`+`, `-`, `*`, `/`).
- `type` – результирующий тип вычислений (доступны BigDecimal)

4) **criterias** - список критериев. Критерий представляет собой условие, которое нужно проверить. Например, для первого критерия с `id=100` проверяется, что дата создания кассового чека меньше указанной даты `date_receipt` (переменная `date_receipt` описана в блоке **variables**).

```jsx
"criterias": [
	{
		"id": 100,
		"parameter": "date_creation",
		"operator": "lt",
		"value": "{date_receipt}"
	},
	{
		"id": 101,
		"parameter": "s120_3",
		"operator": "lt",
		"value": "{s40}"
	},
	{
		"id": 102,
		"parameter": "p1",
		"operator": "lt",
		"value": 5000
	}
	]
```

`id` - уникальный целочисленный идентификатор критерия

`parameter` - вычисляемый параметр из нескольких переменных или переменная, используемая при расчете критерия

`operator` - логический критерий из списка поддерживаемых условий (`gt` - больше, `lt` - меньше, `eq` - равно)

`value` - значение, с которым выполняется сравнение. Может быть как значением (например, `"value": 5000`, так и указанием на переменную `"value": "{date_receipt}"`).

5) **tree** - раздел, который описывает узлы дерева, то есть последовательность вычислений и правила перехода между критериями. 

Первый узел - стартовый. Если в дереве есть решающее правило (развилка True/False), то в этом узле имеется параметр `nodes`, в котором указаны правила перехода к следующим критериям.

Если узел является конечным (то есть на нем вычисления заканчиваются), то в нем есть только идентификатор критерия (`id`) и значение ущерба (`loss`).

```jsx
"tree":
[
	{
		"id": 103,
		"criterias": [100, 101, 102],
		"nodes" :
		[
			{
				"condition": "True",
				"id": 999
			},
			{
				"condition": "False",
				"id": 998
			}
		]
	},
	{
		"id": 999,
		"loss": "1000.0"
	},
	{
		"id": 998,
		"loss": "0.0"
	}
]
```

`id` - уникальный идентификатор критерия в дереве

`criterias` - список критериев на проверку (условия проверки критериев описаны в блоке 
**criterias** выше)

`nodes` - развилка решающего правила. Содержит две ветки. В зависимости от того, по какой ветке пойдет вычисление, становится известен `id` следующего критерия в дереве.

`condition` - имеет значение True (условие проверки критерия дало положительный результат) или False в противном случае

`loss` - значение ущерба. Если риск в правиле сработал (то есть расходы субъекта превышают доходы), то присваивается значение 1000. В противном случае риска нет и значение будет 0.

### Формат ответа

Ниже приведен пример формата записи в ответе, состоящий только из одного результата.  Ответ сохраняется в файле response.json следующего вида:

```jsx
[
	{
			"fid": 69176,
	    "year": 2019,
	    "quarter": 2
	}
]
```

Поля ответа:

`fid` ****- уникальный идентификатор субъекта.

`year ****`- год, в котором выявлено нарушение

`quarter` - квартал, в котором выявлено нарушение
